/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module questionselector_5 (
    input [2:0] questionSelectorSignal,
    input [2:0] playerSignal,
    input rst,
    input clk,
    output reg ans,
    output reg redLED,
    output reg blueLED,
    output reg yellowLED,
    output reg orangeLED,
    output reg purpleLED,
    output reg greenLED,
    output reg whiteLED
  );
  
  
  
  reg M_red_d, M_red_q = 1'h0;
  
  reg M_blue_d, M_blue_q = 1'h0;
  
  reg M_yellow_d, M_yellow_q = 1'h0;
  
  reg M_orange_d, M_orange_q = 1'h0;
  
  reg M_purple_d, M_purple_q = 1'h0;
  
  reg M_green_d, M_green_q = 1'h0;
  
  reg M_white_d, M_white_q = 1'h0;
  
  always @* begin
    M_red_d = M_red_q;
    M_orange_d = M_orange_q;
    M_green_d = M_green_q;
    M_blue_d = M_blue_q;
    M_white_d = M_white_q;
    M_yellow_d = M_yellow_q;
    M_purple_d = M_purple_q;
    
    
    case (playerSignal)
      3'h7: begin
        ans = M_white_q;
      end
      3'h1: begin
        ans = M_blue_q;
      end
      3'h2: begin
        ans = M_yellow_q;
      end
      3'h3: begin
        ans = M_green_q;
      end
      3'h4: begin
        ans = M_red_q;
      end
      3'h5: begin
        ans = M_purple_q;
      end
      3'h6: begin
        ans = M_orange_q;
      end
      3'h0: begin
        ans = 1'h0;
      end
      default: begin
        ans = 1'h0;
      end
    endcase
    
    case (questionSelectorSignal)
      3'h7: begin
        M_red_d = 1'h0;
        redLED = 1'h0;
        M_blue_d = 1'h0;
        blueLED = 1'h0;
        M_yellow_d = 1'h0;
        yellowLED = 1'h0;
        M_orange_d = 1'h0;
        orangeLED = 1'h0;
        M_purple_d = 1'h0;
        purpleLED = 1'h0;
        M_green_d = 1'h0;
        greenLED = 1'h0;
        M_white_d = 1'h1;
        whiteLED = 1'h1;
      end
      3'h1: begin
        M_red_d = 1'h0;
        redLED = 1'h0;
        M_blue_d = 1'h1;
        blueLED = 1'h1;
        M_yellow_d = 1'h0;
        yellowLED = 1'h0;
        M_orange_d = 1'h0;
        orangeLED = 1'h0;
        M_purple_d = 1'h0;
        purpleLED = 1'h0;
        M_green_d = 1'h0;
        greenLED = 1'h0;
        M_white_d = 1'h0;
        whiteLED = 1'h0;
      end
      3'h2: begin
        M_red_d = 1'h0;
        redLED = 1'h0;
        M_blue_d = 1'h0;
        blueLED = 1'h0;
        M_yellow_d = 1'h1;
        yellowLED = 1'h1;
        M_orange_d = 1'h0;
        orangeLED = 1'h0;
        M_purple_d = 1'h0;
        purpleLED = 1'h0;
        M_green_d = 1'h0;
        greenLED = 1'h0;
        M_white_d = 1'h0;
        whiteLED = 1'h0;
      end
      3'h3: begin
        M_red_d = 1'h0;
        redLED = 1'h0;
        M_blue_d = 1'h0;
        blueLED = 1'h0;
        M_yellow_d = 1'h0;
        yellowLED = 1'h0;
        M_orange_d = 1'h0;
        orangeLED = 1'h0;
        M_purple_d = 1'h0;
        purpleLED = 1'h0;
        M_green_d = 1'h1;
        greenLED = 1'h1;
        M_white_d = 1'h0;
        whiteLED = 1'h0;
      end
      3'h4: begin
        M_red_d = 1'h1;
        redLED = 1'h1;
        M_blue_d = 1'h0;
        blueLED = 1'h0;
        M_yellow_d = 1'h0;
        yellowLED = 1'h0;
        M_orange_d = 1'h0;
        orangeLED = 1'h0;
        M_purple_d = 1'h0;
        purpleLED = 1'h0;
        M_green_d = 1'h0;
        greenLED = 1'h0;
        M_white_d = 1'h0;
        whiteLED = 1'h0;
      end
      3'h5: begin
        M_red_d = 1'h0;
        redLED = 1'h0;
        M_blue_d = 1'h0;
        blueLED = 1'h0;
        M_yellow_d = 1'h0;
        yellowLED = 1'h0;
        M_orange_d = 1'h0;
        orangeLED = 1'h0;
        M_purple_d = 1'h1;
        purpleLED = 1'h1;
        M_green_d = 1'h0;
        greenLED = 1'h0;
        M_white_d = 1'h0;
        whiteLED = 1'h0;
      end
      3'h6: begin
        M_red_d = 1'h0;
        redLED = 1'h0;
        M_blue_d = 1'h0;
        blueLED = 1'h0;
        M_yellow_d = 1'h0;
        yellowLED = 1'h0;
        M_orange_d = 1'h1;
        orangeLED = 1'h1;
        M_purple_d = 1'h0;
        purpleLED = 1'h0;
        M_green_d = 1'h0;
        greenLED = 1'h0;
        M_white_d = 1'h0;
        whiteLED = 1'h0;
      end
      3'h0: begin
        M_red_d = 1'h1;
        redLED = 1'h1;
        M_blue_d = 1'h1;
        blueLED = 1'h1;
        M_yellow_d = 1'h1;
        yellowLED = 1'h1;
        M_orange_d = 1'h1;
        orangeLED = 1'h1;
        M_purple_d = 1'h1;
        purpleLED = 1'h1;
        M_green_d = 1'h1;
        greenLED = 1'h1;
        M_white_d = 1'h1;
        whiteLED = 1'h1;
      end
      default: begin
        M_red_d = 1'h0;
        redLED = 1'h0;
        M_blue_d = 1'h0;
        blueLED = 1'h0;
        M_yellow_d = 1'h0;
        yellowLED = 1'h0;
        M_orange_d = 1'h0;
        orangeLED = 1'h0;
        M_purple_d = 1'h0;
        purpleLED = 1'h0;
        M_green_d = 1'h0;
        greenLED = 1'h0;
        M_white_d = 1'h0;
        whiteLED = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_purple_q <= 1'h0;
    end else begin
      M_purple_q <= M_purple_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_white_q <= 1'h0;
    end else begin
      M_white_q <= M_white_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_red_q <= 1'h0;
    end else begin
      M_red_q <= M_red_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_blue_q <= 1'h0;
    end else begin
      M_blue_q <= M_blue_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_green_q <= 1'h0;
    end else begin
      M_green_q <= M_green_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_orange_q <= 1'h0;
    end else begin
      M_orange_q <= M_orange_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_yellow_q <= 1'h0;
    end else begin
      M_yellow_q <= M_yellow_d;
    end
  end
  
endmodule
