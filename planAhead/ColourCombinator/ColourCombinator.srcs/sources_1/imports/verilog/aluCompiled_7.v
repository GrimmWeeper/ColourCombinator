/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module aluCompiled_7 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] alu,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adderalu_add;
  wire [1-1:0] M_adderalu_z;
  wire [1-1:0] M_adderalu_v;
  wire [1-1:0] M_adderalu_n;
  reg [16-1:0] M_adderalu_a;
  reg [16-1:0] M_adderalu_b;
  reg [6-1:0] M_adderalu_alufn;
  adder16b_15 adderalu (
    .a(M_adderalu_a),
    .b(M_adderalu_b),
    .alufn(M_adderalu_alufn),
    .add(M_adderalu_add),
    .z(M_adderalu_z),
    .v(M_adderalu_v),
    .n(M_adderalu_n)
  );
  
  wire [16-1:0] M_comparealu_cmp;
  reg [1-1:0] M_comparealu_z;
  reg [1-1:0] M_comparealu_v;
  reg [1-1:0] M_comparealu_n;
  reg [6-1:0] M_comparealu_alufn;
  compare16b_16 comparealu (
    .z(M_comparealu_z),
    .v(M_comparealu_v),
    .n(M_comparealu_n),
    .alufn(M_comparealu_alufn),
    .cmp(M_comparealu_cmp)
  );
  
  wire [16-1:0] M_booleanalu_boole;
  reg [6-1:0] M_booleanalu_alufn;
  reg [16-1:0] M_booleanalu_a;
  reg [16-1:0] M_booleanalu_b;
  boolean16b_17 booleanalu (
    .alufn(M_booleanalu_alufn),
    .a(M_booleanalu_a),
    .b(M_booleanalu_b),
    .boole(M_booleanalu_boole)
  );
  
  wire [16-1:0] M_shifteralu_shift;
  reg [6-1:0] M_shifteralu_alufn;
  reg [16-1:0] M_shifteralu_a;
  reg [16-1:0] M_shifteralu_b;
  shifter16b_18 shifteralu (
    .alufn(M_shifteralu_alufn),
    .a(M_shifteralu_a),
    .b(M_shifteralu_b),
    .shift(M_shifteralu_shift)
  );
  
  always @* begin
    M_adderalu_a = a;
    M_adderalu_b = b;
    M_adderalu_alufn = alufn;
    M_comparealu_z = M_adderalu_z;
    M_comparealu_v = M_adderalu_v;
    M_comparealu_n = M_adderalu_n;
    M_comparealu_alufn = alufn;
    M_booleanalu_a = a;
    M_booleanalu_b = b;
    M_booleanalu_alufn = alufn;
    M_shifteralu_a = a;
    M_shifteralu_b = b;
    M_shifteralu_alufn = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_adderalu_add;
      end
      2'h1: begin
        alu = M_booleanalu_boole;
      end
      2'h2: begin
        alu = M_shifteralu_shift;
      end
      2'h3: begin
        alu = M_comparealu_cmp;
      end
      default: begin
        alu = 16'h0000;
      end
    endcase
    z = M_adderalu_z;
    v = M_adderalu_v;
    n = M_adderalu_n;
  end
endmodule
