/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder16b_15 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] add,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  reg [15:0] adder;
  
  reg [15:0] subber;
  
  reg overflow;
  
  always @* begin
    
    case (alufn[0+1-:2])
      2'h0: begin
        adder = a + b;
        subber = a - b;
        overflow = (~a[15+0-:1] & ~b[15+0-:1] & adder[15+0-:1]) | (a[15+0-:1] & b[15+0-:1] & ~adder[15+0-:1]);
      end
      2'h1: begin
        adder = a - b;
        subber = a - b;
        overflow = (a[15+0-:1] & ~b[15+0-:1] & ~subber[15+0-:1]) | (~a[15+0-:1] & b[15+0-:1] & subber[15+0-:1]);
      end
      2'h2: begin
        adder = a * b;
        subber = a - b;
        overflow = (~a[15+0-:1] & ~b[15+0-:1] & adder[15+0-:1]) | (a[15+0-:1] & b[15+0-:1] & ~adder[15+0-:1]);
      end
      2'h3: begin
        adder = a / b;
        subber = a - b;
        overflow = (~a[15+0-:1] & ~b[15+0-:1] & adder[15+0-:1]) | (a[15+0-:1] & b[15+0-:1] & ~adder[15+0-:1]);
      end
      default: begin
        adder = a + b;
        subber = a - b;
        overflow = 1'h0;
      end
    endcase
    z = (~|subber);
    n = subber[15+0-:1];
    add = adder;
    v = overflow;
  end
endmodule
