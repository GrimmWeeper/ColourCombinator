/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_2seg,
    output reg [3:0] io_2sel,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_blue1_out;
  reg [1-1:0] M_edge_blue1_in;
  edge_detector_2 edge_blue1 (
    .clk(clk),
    .in(M_edge_blue1_in),
    .out(M_edge_blue1_out)
  );
  wire [1-1:0] M_edge_red1_out;
  reg [1-1:0] M_edge_red1_in;
  edge_detector_2 edge_red1 (
    .clk(clk),
    .in(M_edge_red1_in),
    .out(M_edge_red1_out)
  );
  wire [1-1:0] M_edge_yellow1_out;
  reg [1-1:0] M_edge_yellow1_in;
  edge_detector_2 edge_yellow1 (
    .clk(clk),
    .in(M_edge_yellow1_in),
    .out(M_edge_yellow1_out)
  );
  wire [1-1:0] M_edge_blue2_out;
  reg [1-1:0] M_edge_blue2_in;
  edge_detector_2 edge_blue2 (
    .clk(clk),
    .in(M_edge_blue2_in),
    .out(M_edge_blue2_out)
  );
  wire [1-1:0] M_edge_red2_out;
  reg [1-1:0] M_edge_red2_in;
  edge_detector_2 edge_red2 (
    .clk(clk),
    .in(M_edge_red2_in),
    .out(M_edge_red2_out)
  );
  wire [1-1:0] M_edge_yellow2_out;
  reg [1-1:0] M_edge_yellow2_in;
  edge_detector_2 edge_yellow2 (
    .clk(clk),
    .in(M_edge_yellow2_in),
    .out(M_edge_yellow2_out)
  );
  wire [1-1:0] M_edge_reset_out;
  reg [1-1:0] M_edge_reset_in;
  edge_detector_2 edge_reset (
    .clk(clk),
    .in(M_edge_reset_in),
    .out(M_edge_reset_out)
  );
  wire [1-1:0] M_button_reset_out;
  reg [1-1:0] M_button_reset_in;
  button_conditioner_3 button_reset (
    .clk(clk),
    .in(M_button_reset_in),
    .out(M_button_reset_out)
  );
  wire [1-1:0] M_button_blue1_out;
  reg [1-1:0] M_button_blue1_in;
  button_conditioner_3 button_blue1 (
    .clk(clk),
    .in(M_button_blue1_in),
    .out(M_button_blue1_out)
  );
  wire [1-1:0] M_button_red1_out;
  reg [1-1:0] M_button_red1_in;
  button_conditioner_3 button_red1 (
    .clk(clk),
    .in(M_button_red1_in),
    .out(M_button_red1_out)
  );
  wire [1-1:0] M_button_yellow1_out;
  reg [1-1:0] M_button_yellow1_in;
  button_conditioner_3 button_yellow1 (
    .clk(clk),
    .in(M_button_yellow1_in),
    .out(M_button_yellow1_out)
  );
  wire [1-1:0] M_button_blue2_out;
  reg [1-1:0] M_button_blue2_in;
  button_conditioner_3 button_blue2 (
    .clk(clk),
    .in(M_button_blue2_in),
    .out(M_button_blue2_out)
  );
  wire [1-1:0] M_button_red2_out;
  reg [1-1:0] M_button_red2_in;
  button_conditioner_3 button_red2 (
    .clk(clk),
    .in(M_button_red2_in),
    .out(M_button_red2_out)
  );
  wire [1-1:0] M_button_yellow2_out;
  reg [1-1:0] M_button_yellow2_in;
  button_conditioner_3 button_yellow2 (
    .clk(clk),
    .in(M_button_yellow2_in),
    .out(M_button_yellow2_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [7-1:0] M_seg2_seg;
  wire [4-1:0] M_seg2_sel;
  reg [16-1:0] M_seg2_values;
  multi_seven_seg_4 seg2 (
    .clk(clk),
    .rst(rst),
    .values(M_seg2_values),
    .seg(M_seg2_seg),
    .sel(M_seg2_sel)
  );
  wire [1-1:0] M_duoSel1_ans;
  wire [1-1:0] M_duoSel1_redLED;
  wire [1-1:0] M_duoSel1_blueLED;
  wire [1-1:0] M_duoSel1_yellowLED;
  wire [1-1:0] M_duoSel1_orangeLED;
  wire [1-1:0] M_duoSel1_purpleLED;
  wire [1-1:0] M_duoSel1_greenLED;
  wire [1-1:0] M_duoSel1_whiteLED;
  reg [3-1:0] M_duoSel1_questionSelectorSignal;
  reg [3-1:0] M_duoSel1_playerSignal;
  questionselector_5 duoSel1 (
    .clk(clk),
    .rst(rst),
    .questionSelectorSignal(M_duoSel1_questionSelectorSignal),
    .playerSignal(M_duoSel1_playerSignal),
    .ans(M_duoSel1_ans),
    .redLED(M_duoSel1_redLED),
    .blueLED(M_duoSel1_blueLED),
    .yellowLED(M_duoSel1_yellowLED),
    .orangeLED(M_duoSel1_orangeLED),
    .purpleLED(M_duoSel1_purpleLED),
    .greenLED(M_duoSel1_greenLED),
    .whiteLED(M_duoSel1_whiteLED)
  );
  wire [1-1:0] M_duoSel2_ans;
  wire [1-1:0] M_duoSel2_redLED;
  wire [1-1:0] M_duoSel2_blueLED;
  wire [1-1:0] M_duoSel2_yellowLED;
  wire [1-1:0] M_duoSel2_orangeLED;
  wire [1-1:0] M_duoSel2_purpleLED;
  wire [1-1:0] M_duoSel2_greenLED;
  wire [1-1:0] M_duoSel2_whiteLED;
  reg [3-1:0] M_duoSel2_questionSelectorSignal;
  reg [3-1:0] M_duoSel2_playerSignal;
  questionselector_5 duoSel2 (
    .clk(clk),
    .rst(rst),
    .questionSelectorSignal(M_duoSel2_questionSelectorSignal),
    .playerSignal(M_duoSel2_playerSignal),
    .ans(M_duoSel2_ans),
    .redLED(M_duoSel2_redLED),
    .blueLED(M_duoSel2_blueLED),
    .yellowLED(M_duoSel2_yellowLED),
    .orangeLED(M_duoSel2_orangeLED),
    .purpleLED(M_duoSel2_purpleLED),
    .greenLED(M_duoSel2_greenLED),
    .whiteLED(M_duoSel2_whiteLED)
  );
  wire [32-1:0] M_rand_num;
  reg [1-1:0] M_rand_next;
  reg [32-1:0] M_rand_seed;
  pn_gen_6 rand (
    .clk(clk),
    .rst(rst),
    .next(M_rand_next),
    .seed(M_rand_seed),
    .num(M_rand_num)
  );
  reg [29:0] M_duocounter_d, M_duocounter_q = 1'h0;
  reg [127:0] M_r_d, M_r_q = 1'h0;
  reg [2:0] M_t_d, M_t_q = 1'h0;
  reg [7:0] M_duoqc_d, M_duoqc_q = 1'h0;
  reg [2:0] M_duoqnschoice_d, M_duoqnschoice_q = 1'h0;
  reg [31:0] M_duoseed_d, M_duoseed_q = 1'h0;
  wire [1-1:0] M_soloSel_ans;
  wire [1-1:0] M_soloSel_redLED;
  wire [1-1:0] M_soloSel_blueLED;
  wire [1-1:0] M_soloSel_yellowLED;
  wire [1-1:0] M_soloSel_orangeLED;
  wire [1-1:0] M_soloSel_purpleLED;
  wire [1-1:0] M_soloSel_greenLED;
  wire [1-1:0] M_soloSel_whiteLED;
  reg [3-1:0] M_soloSel_questionSelectorSignal;
  reg [3-1:0] M_soloSel_playerSignal;
  questionselector_5 soloSel (
    .clk(clk),
    .rst(rst),
    .questionSelectorSignal(M_soloSel_questionSelectorSignal),
    .playerSignal(M_soloSel_playerSignal),
    .ans(M_soloSel_ans),
    .redLED(M_soloSel_redLED),
    .blueLED(M_soloSel_blueLED),
    .yellowLED(M_soloSel_yellowLED),
    .orangeLED(M_soloSel_orangeLED),
    .purpleLED(M_soloSel_purpleLED),
    .greenLED(M_soloSel_greenLED),
    .whiteLED(M_soloSel_whiteLED)
  );
  reg [29:0] M_solocounter_d, M_solocounter_q = 1'h0;
  reg [63:0] M_p_d, M_p_q = 1'h0;
  reg [7:0] M_soloqc_d, M_soloqc_q = 1'h0;
  reg [2:0] M_soloqnschoice_d, M_soloqnschoice_q = 1'h0;
  localparam CHOOSEGAMEMODE_state = 5'd0;
  localparam DUOCOMPARE_state = 5'd1;
  localparam P1STREAK_state = 5'd2;
  localparam P1MULTIPLY_state = 5'd3;
  localparam P1SCORE_state = 5'd4;
  localparam P2RESET_state = 5'd5;
  localparam P2STREAK_state = 5'd6;
  localparam P2MULTIPLY_state = 5'd7;
  localparam P2SCORE_state = 5'd8;
  localparam P1RESET_state = 5'd9;
  localparam DUOCHECKEND_state = 5'd10;
  localparam DUOSCORE_state = 5'd11;
  localparam DUOQNSGEN_state = 5'd12;
  localparam SOLOCOMPARE_state = 5'd13;
  localparam SOLOSTREAK_state = 5'd14;
  localparam SOLOMULTIPLY_state = 5'd15;
  localparam SOLOUPDATESTREAK_state = 5'd16;
  localparam SOLOSCORE_state = 5'd17;
  localparam SOLOCHECKEND_state = 5'd18;
  localparam SOLOEND_state = 5'd19;
  localparam SOLOQNSGEN_state = 5'd20;
  
  reg [4:0] M_state_d, M_state_q = CHOOSEGAMEMODE_state;
  
  localparam X = 5'h17;
  
  localparam Y = 4'ha;
  
  localparam S = 5'h1b;
  
  reg [15:0] alu;
  
  reg [5:0] alufn;
  
  wire [16-1:0] M_alumodule_alu;
  wire [1-1:0] M_alumodule_z;
  wire [1-1:0] M_alumodule_v;
  wire [1-1:0] M_alumodule_n;
  reg [16-1:0] M_alumodule_a;
  reg [16-1:0] M_alumodule_b;
  reg [6-1:0] M_alumodule_alufn;
  aluCompiled_7 alumodule (
    .a(M_alumodule_a),
    .b(M_alumodule_b),
    .alufn(M_alumodule_alufn),
    .alu(M_alumodule_alu),
    .z(M_alumodule_z),
    .v(M_alumodule_v),
    .n(M_alumodule_n)
  );
  
  wire [12-1:0] M_converterP1_digits;
  reg [10-1:0] M_converterP1_value;
  bin_to_dec_8 converterP1 (
    .value(M_converterP1_value),
    .digits(M_converterP1_digits)
  );
  
  wire [12-1:0] M_converterP2_digits;
  reg [10-1:0] M_converterP2_value;
  bin_to_dec_8 converterP2 (
    .value(M_converterP2_value),
    .digits(M_converterP2_digits)
  );
  
  wire [3-1:0] M_color_cycle_cnt_value;
  counter_9 color_cycle_cnt (
    .clk(clk),
    .rst(rst),
    .value(M_color_cycle_cnt_value)
  );
  
  wire [8-1:0] M_color_cnt_dec_out;
  decoder_10 color_cnt_dec (
    .in(M_color_cycle_cnt_value),
    .out(M_color_cnt_dec_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_p_d = M_p_q;
    M_solocounter_d = M_solocounter_q;
    M_r_d = M_r_q;
    M_t_d = M_t_q;
    M_duoseed_d = M_duoseed_q;
    M_duoqc_d = M_duoqc_q;
    M_duoqnschoice_d = M_duoqnschoice_q;
    M_soloqc_d = M_soloqc_q;
    M_soloqnschoice_d = M_soloqnschoice_q;
    M_duocounter_d = M_duocounter_q;
    
    M_converterP1_value = 16'h0000;
    M_converterP2_value = 16'h0000;
    M_button_blue1_in = io_dip[16+2+0-:1];
    M_button_red1_in = io_dip[16+1+0-:1];
    M_button_yellow1_in = io_dip[16+0+0-:1];
    M_button_blue2_in = io_dip[8+2+0-:1];
    M_button_yellow2_in = io_dip[8+1+0-:1];
    M_button_red2_in = io_dip[8+0+0-:1];
    M_edge_blue1_in = M_button_blue1_out;
    M_edge_yellow1_in = M_button_yellow1_out;
    M_edge_red1_in = M_button_red1_out;
    M_edge_blue2_in = M_button_blue2_out;
    M_edge_yellow2_in = M_button_yellow2_out;
    M_edge_red2_in = M_button_red2_out;
    M_button_reset_in = io_button[1+0-:1];
    M_edge_reset_in = M_button_reset_out;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_2seg = 8'hff;
    io_2sel = 4'hf;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_2seg = M_seg2_seg;
    io_2sel = ~M_seg2_sel;
    io_seg = M_seg_seg;
    io_sel = ~M_seg_sel;
    M_seg_values = 16'hffff;
    M_seg2_values = 16'hffff;
    alufn = 6'h00;
    M_alumodule_alufn = alufn;
    alu = M_alumodule_alu;
    M_alumodule_a = 16'h0000;
    M_alumodule_b = 16'h0000;
    M_duoSel1_playerSignal = 16'h0000;
    M_duoSel1_questionSelectorSignal = 3'h0;
    M_duoSel2_playerSignal = 16'h0000;
    M_duoSel2_questionSelectorSignal = 3'h0;
    M_rand_next = 1'h0;
    M_rand_seed = M_duoseed_q;
    M_soloSel_playerSignal = 16'h0000;
    M_soloSel_questionSelectorSignal = 3'h0;
    M_solocounter_d = M_solocounter_q + 1'h1;
    io_led[16+7-:8] = 8'h00;
    io_led[8+7-:8] = 8'h00;
    io_led[0+7-:8] = 8'h00;
    
    case (M_state_q)
      CHOOSEGAMEMODE_state: begin
        M_seg_values = 16'h0000;
        M_seg2_values = 16'h0000;
        M_duoqc_d = 1'h0;
        M_duoqnschoice_d = 3'h2;
        M_r_d[0+15-:16] = 16'h0000;
        M_r_d[16+15-:16] = 16'h0000;
        M_r_d[32+15-:16] = 16'h0000;
        M_r_d[48+15-:16] = 16'h0000;
        M_r_d[64+15-:16] = 16'h0000;
        M_r_d[80+15-:16] = 16'h0000;
        M_r_d[96+15-:16] = 16'h0000;
        M_r_d[112+15-:16] = 16'h0000;
        M_soloqc_d = 1'h0;
        M_soloqnschoice_d = 3'h2;
        M_p_d[0+15-:16] = 16'h0000;
        M_p_d[16+15-:16] = 16'h0000;
        M_p_d[32+15-:16] = 16'h0000;
        M_p_d[48+15-:16] = 16'h0000;
        io_led[0+0+0-:1] = M_color_cnt_dec_out[0+0-:1];
        io_led[0+1+0-:1] = M_color_cnt_dec_out[4+0-:1];
        io_led[0+2+0-:1] = M_color_cnt_dec_out[2+0-:1];
        io_led[0+3+0-:1] = M_color_cnt_dec_out[1+0-:1];
        io_led[0+4+0-:1] = M_color_cnt_dec_out[5+0-:1];
        io_led[0+5+0-:1] = M_color_cnt_dec_out[3+0-:1];
        io_led[0+6+0-:1] = M_color_cnt_dec_out[6+0-:1];
        if (io_button[3+0-:1] == 1'h1) begin
          M_state_d = SOLOCOMPARE_state;
          M_solocounter_d = 1'h0;
        end else begin
          if (io_button[4+0-:1] == 1'h1) begin
            M_state_d = DUOCOMPARE_state;
            M_duocounter_d = 1'h0;
          end
        end
      end
      DUOCOMPARE_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_duoSel1_questionSelectorSignal = M_duoqnschoice_q;
        M_duoSel2_questionSelectorSignal = M_duoqnschoice_q;
        io_led[0+0+0-:1] = M_duoSel1_redLED;
        io_led[0+1+0-:1] = M_duoSel1_blueLED;
        io_led[0+2+0-:1] = M_duoSel1_yellowLED;
        io_led[0+3+0-:1] = M_duoSel1_orangeLED;
        io_led[0+4+0-:1] = M_duoSel1_purpleLED;
        io_led[0+5+0-:1] = M_duoSel1_greenLED;
        io_led[0+6+0-:1] = M_duoSel1_whiteLED;
        io_led[16+7-:8] = M_r_q[0+15-:16];
        io_led[8+7-:8] = M_r_q[16+15-:16];
        M_converterP1_value = M_r_q[0+15-:16];
        M_converterP2_value = M_r_q[16+15-:16];
        M_seg_values = {4'h0, M_converterP1_digits[0+3-:4], M_converterP1_digits[4+3-:4], M_converterP1_digits[8+3-:4]};
        M_seg2_values = {4'h0, M_converterP2_digits[0+3-:4], M_converterP2_digits[4+3-:4], M_converterP2_digits[8+3-:4]};
        M_duoSel1_playerSignal = io_dip[16+0+2-:3];
        M_duoSel2_playerSignal = io_dip[8+0+2-:3];
        M_r_d[64+15-:16] = M_duoSel1_ans;
        M_r_d[80+15-:16] = M_duoSel2_ans;
        if (M_duocounter_q[23+0-:1] == 1'h1 && M_r_q[64+15-:16] == 1'h1) begin
          M_state_d = P1STREAK_state;
          M_duocounter_d = 1'h0;
        end
        if (M_duocounter_q[23+0-:1] == 1'h1 && M_r_q[80+15-:16] == 1'h1) begin
          M_state_d = P2STREAK_state;
          M_duocounter_d = 1'h0;
        end
        if (M_duocounter_q[23+0-:1] == 1'h1 && io_button[1+0-:1] == 1'h1) begin
          M_state_d = DUOSCORE_state;
          M_duocounter_d = 1'h0;
        end
      end
      P1STREAK_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = M_r_q[32+15-:16];
        M_alumodule_b = M_r_q[64+15-:16];
        M_r_d[32+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = P1MULTIPLY_state;
          M_duocounter_d = 1'h0;
        end
      end
      P1MULTIPLY_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h20;
        M_alumodule_a = M_r_q[64+15-:16];
        M_alumodule_b = M_r_q[32+15-:16];
        M_r_d[96+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = P1SCORE_state;
          M_duocounter_d = 1'h0;
        end
      end
      P1SCORE_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = M_r_q[0+15-:16];
        M_alumodule_b = M_r_q[96+15-:16];
        M_r_d[0+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = P2RESET_state;
          M_duocounter_d = 1'h0;
        end
      end
      P2RESET_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h02;
        M_alumodule_a = M_r_q[48+15-:16];
        M_alumodule_b = M_r_q[80+15-:16];
        M_r_d[48+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = DUOCHECKEND_state;
          M_duocounter_d = 1'h0;
        end
      end
      P2STREAK_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = M_r_q[48+15-:16];
        M_alumodule_b = M_r_q[80+15-:16];
        M_r_d[48+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = P2MULTIPLY_state;
          M_duocounter_d = 1'h0;
        end
      end
      P2MULTIPLY_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h20;
        M_alumodule_a = M_r_q[80+15-:16];
        M_alumodule_b = M_r_q[48+15-:16];
        M_r_d[112+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = P2SCORE_state;
          M_duocounter_d = 1'h0;
        end
      end
      P2SCORE_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = M_r_q[16+15-:16];
        M_alumodule_b = M_r_q[112+15-:16];
        M_r_d[16+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = P1RESET_state;
          M_duocounter_d = 1'h0;
        end
      end
      P1RESET_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_alumodule_alufn = 6'h02;
        M_alumodule_a = M_r_q[32+15-:16];
        M_alumodule_b = M_r_q[64+15-:16];
        M_r_d[32+15-:16] = M_alumodule_alu;
        if (M_duocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = DUOCHECKEND_state;
          M_duocounter_d = 1'h0;
        end
      end
      DUOCHECKEND_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        if (M_duocounter_q[10+0-:1] == 1'h1 && M_duoqc_q == 8'h14) begin
          M_state_d = DUOSCORE_state;
          M_duocounter_d = 1'h0;
        end else begin
          if (M_duocounter_q[10+0-:1] == 1'h1) begin
            M_state_d = DUOQNSGEN_state;
            M_duocounter_d = 1'h0;
            M_duoqc_d = M_duoqc_q + 8'h01;
          end
        end
      end
      DUOSCORE_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        io_led[16+7-:8] = M_r_q[0+15-:16];
        io_led[8+7-:8] = M_r_q[16+15-:16];
        M_converterP1_value = M_r_q[0+15-:16];
        M_converterP2_value = M_r_q[16+15-:16];
        M_seg_values = {4'h0, M_converterP1_digits[0+3-:4], M_converterP1_digits[4+3-:4], M_converterP1_digits[8+3-:4]};
        M_seg2_values = {4'h0, M_converterP2_digits[0+3-:4], M_converterP2_digits[4+3-:4], M_converterP2_digits[8+3-:4]};
        M_duoseed_d = M_duoseed_q + 1'h1;
        if (M_duocounter_q[23+0-:1] == 1'h1 && io_button[1+0-:1] == 1'h1) begin
          M_state_d = CHOOSEGAMEMODE_state;
          M_duocounter_d = 1'h0;
        end
      end
      DUOQNSGEN_state: begin
        M_duocounter_d = M_duocounter_q + 1'h1;
        M_rand_next = 1'h1;
        M_t_d = M_rand_num;
        if (M_duocounter_q[23+0-:1] == 1'h1 && M_t_q == 3'h0) begin
          M_duocounter_d = 1'h0;
          M_duoqnschoice_d = 3'h6;
          M_state_d = DUOCOMPARE_state;
        end else begin
          if (M_duocounter_q[23+0-:1] == 1'h1 && M_t_q != 3'h0) begin
            M_duocounter_d = 1'h0;
            M_duoqnschoice_d = M_t_q;
            M_state_d = DUOCOMPARE_state;
          end
        end
      end
      SOLOCOMPARE_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        M_soloSel_questionSelectorSignal = M_soloqnschoice_q;
        io_led[0+0+0-:1] = M_soloSel_redLED;
        io_led[0+1+0-:1] = M_soloSel_blueLED;
        io_led[0+2+0-:1] = M_soloSel_yellowLED;
        io_led[0+3+0-:1] = M_soloSel_orangeLED;
        io_led[0+4+0-:1] = M_soloSel_purpleLED;
        io_led[0+5+0-:1] = M_soloSel_greenLED;
        io_led[0+6+0-:1] = M_soloSel_whiteLED;
        io_led[16+7-:8] = M_p_q[0+15-:16];
        io_led[8+7-:8] = M_p_q[16+15-:16];
        M_converterP1_value = M_p_q[0+15-:16];
        M_converterP2_value = M_p_q[16+15-:16];
        M_seg_values = {4'h0, M_converterP1_digits[0+3-:4], M_converterP1_digits[4+3-:4], M_converterP1_digits[8+3-:4]};
        M_seg2_values = {4'h0, M_converterP2_digits[0+3-:4], M_converterP2_digits[4+3-:4], M_converterP2_digits[8+3-:4]};
        M_soloSel_playerSignal = io_dip[16+0+2-:3];
        M_p_d[32+15-:16] = M_soloSel_ans;
        if ((M_p_q[32+15-:16] == 1'h1) && M_solocounter_q[27+0-:1] != 1'h1) begin
          M_state_d = SOLOSTREAK_state;
          M_solocounter_d = 1'h0;
        end else begin
          if (M_solocounter_q[27+0-:1] == 1'h1) begin
            M_state_d = SOLOUPDATESTREAK_state;
            M_solocounter_d = 1'h0;
          end
        end
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = SOLOEND_state;
          M_solocounter_d = 1'h0;
        end
      end
      SOLOSTREAK_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = M_p_q[16+15-:16];
        M_alumodule_b = M_p_q[32+15-:16];
        M_p_d[16+15-:16] = M_alumodule_alu;
        if (M_solocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = SOLOMULTIPLY_state;
          M_solocounter_d = 1'h0;
        end
      end
      SOLOMULTIPLY_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        M_alumodule_alufn = 6'h02;
        M_alumodule_a = M_p_q[16+15-:16];
        M_alumodule_b = M_p_q[32+15-:16];
        M_p_d[48+15-:16] = M_alumodule_alu;
        if (M_solocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = SOLOSCORE_state;
          M_solocounter_d = 1'h0;
        end
      end
      SOLOSCORE_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = M_p_q[0+15-:16];
        M_alumodule_b = M_p_q[48+15-:16];
        M_p_d[0+15-:16] = M_alumodule_alu;
        if (M_solocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = SOLOCHECKEND_state;
          M_solocounter_d = 1'h0;
        end
      end
      SOLOUPDATESTREAK_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        M_p_d[16+15-:16] = 16'h0000;
        if (M_solocounter_q[10+0-:1] == 1'h1) begin
          M_state_d = SOLOCHECKEND_state;
          M_solocounter_d = 1'h0;
        end
      end
      SOLOCHECKEND_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        if (M_solocounter_q[10+0-:1] == 1'h1 && M_soloqc_q == 8'h14) begin
          M_state_d = SOLOEND_state;
          M_solocounter_d = 1'h0;
        end else begin
          if (M_solocounter_q[10+0-:1] == 1'h1) begin
            M_state_d = SOLOQNSGEN_state;
            M_solocounter_d = 1'h0;
            M_soloqc_d = M_soloqc_q + 8'h01;
          end
        end
      end
      SOLOQNSGEN_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        M_rand_next = 1'h1;
        M_t_d = M_rand_num;
        if (M_solocounter_q[25+0-:1] == 1'h1 && M_t_q == 3'h0) begin
          M_solocounter_d = 1'h0;
          M_soloqnschoice_d = 3'h6;
          M_state_d = SOLOCOMPARE_state;
        end else begin
          if (M_solocounter_q[25+0-:1] == 1'h1 && M_t_q != 3'h0) begin
            M_solocounter_d = 1'h0;
            M_soloqnschoice_d = M_t_q;
            M_state_d = SOLOCOMPARE_state;
          end
        end
      end
      SOLOEND_state: begin
        M_solocounter_d = M_solocounter_q + 1'h1;
        io_led[16+7-:8] = M_p_q[0+15-:16];
        M_converterP1_value = M_p_q[0+15-:16];
        M_seg_values = {4'h0, M_converterP1_digits[0+3-:4], M_converterP1_digits[4+3-:4], M_converterP1_digits[8+3-:4]};
        if (M_solocounter_q[23+0-:1] == 1'h1 && io_button[1+0-:1] == 1'h1) begin
          M_state_d = CHOOSEGAMEMODE_state;
          M_duoseed_d = M_duoseed_q + 1'h1;
          M_solocounter_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_duocounter_q <= 1'h0;
      M_r_q <= 1'h0;
      M_t_q <= 1'h0;
      M_duoqc_q <= 1'h0;
      M_duoqnschoice_q <= 1'h0;
      M_duoseed_q <= 1'h0;
      M_solocounter_q <= 1'h0;
      M_p_q <= 1'h0;
      M_soloqc_q <= 1'h0;
      M_soloqnschoice_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_duocounter_q <= M_duocounter_d;
      M_r_q <= M_r_d;
      M_t_q <= M_t_d;
      M_duoqc_q <= M_duoqc_d;
      M_duoqnschoice_q <= M_duoqnschoice_d;
      M_duoseed_q <= M_duoseed_d;
      M_solocounter_q <= M_solocounter_d;
      M_p_q <= M_p_d;
      M_soloqc_q <= M_soloqc_d;
      M_soloqnschoice_q <= M_soloqnschoice_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
